@page "/gridcud"
@using System.ComponentModel.DataAnnotations
@using System.Collections.ObjectModel

<div>

    <TelerikGrid Data="@GridData"
                 AutoGenerateColumns="true"
                 EditMode="GridEditMode.Popup"
                 Pageable="true"
                 SelectionMode="GridSelectionMode.Multiple"
                 @bind-SelectedItems="@SelectedUsers"
                 PageSize="@PageSize"
                 OnCreate="@CreateItem"
                 OnUpdate="@UpdateItem"
                 OnDelete="@DeleteItem">
        <GridToolBar>
            <GridCommandButton Command="Add" Icon="add">Add</GridCommandButton>
        </GridToolBar>
        <GridColumns>
            <GridCheckboxColumn />
            <GridAutoGeneratedColumns ColumnWidth="200px" />
            <GridColumn Field="@nameof(GridDataModel.RegistrationDate)" Title="Registration Date" Width="200px" />
            <GridCommandColumn Width="250px">
                <GridCommandButton Command="Edit" Icon="edit">Edit</GridCommandButton>
                <GridCommandButton Command="Delete" Icon="delete">Delete</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>


    @if (SelectedUsers.Any())
    {
        <h4 class="text-info">Selected users:</h4>
        @foreach (var user in SelectedUsers)
        {
            <div class="card">
                <div class="card-body">
                    <h5>@user.Username</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@user.EmailAddress</h6>
                    <p class="card-text">
                        Registered on: @user.RegistrationDate.ToShortDateString()
                    </p>
                    <p class="card-text">
                        Purchased books: @user.BoughtBooks
                    </p>
                </div>
            </div>
        }
    }
</div>

@code {
    public List<GridDataModel> GridData { get; set; }
    public IEnumerable<GridDataModel> SelectedUsers { get; set; } = new ObservableCollection<GridDataModel>();
    public int PageSize { get; set; } = 3;

    #region data model with annotations
    public class GridDataModel
    {
        [Editable(false)]
        [Display(Name = "User Id")]
        public int Id { get; set; }

        [Required(ErrorMessage = "Username is mandatory field")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email address is mandatory field")]
        [EmailAddress(ErrorMessage = "Please provide a valid email address.")]
        [Display(Name = "Email Address")]
        public string EmailAddress { get; set; }

        [Display(AutoGenerateField = false)]
        public DateTime RegistrationDate { get; set; }

        [Display(Name = "Local Time")]
        public DateTime LocalTime { get; set; }

        [Display(Name = "Purchased books")]
        public string BoughtBooks { get; set; } = String.Join(", ", Books);
    }

    private static List<string> Books = new List<string>() { "Wolf", "Lord of the Rings", "The Hobbit" };

    #endregion

    #region CUD operations
    async Task UpdateItem(GridCommandEventArgs args)
    {
        GridDataModel item = (GridDataModel)args.Item;

        // perform actual data source operations here through your service
        await MyService.Update(item);

        // update the local view-model data with the service data
        await GetGridData();
    }

    async Task DeleteItem(GridCommandEventArgs args)
    {
        GridDataModel item = (GridDataModel)args.Item;

        // perform actual data source operation here through your service
        await MyService.Delete(item);

        // update the local view-model data with the service data
        await GetGridData();
    }

    async Task CreateItem(GridCommandEventArgs args)
    {
        GridDataModel item = (GridDataModel)args.Item;

        // perform actual data source operation here through your service
        await MyService.Create(item);

        // update the local view-model data with the service data
        await GetGridData();
    }

    #endregion

    async Task GetGridData()
    {
        GridData = await MyService.Read();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetGridData();
    }

    // the following static class mimics an actual data service that handles the actual data source
    // replace it with your actual service through the DI, this only mimics how the API can look like and works for this standalone page
    public static class MyService
    {
        private static List<GridDataModel> _data { get; set; } = new List<GridDataModel>();

        public static async Task Create(GridDataModel itemToInsert)
        {
            itemToInsert.Id = _data.Count + 1;
            _data.Insert(0, itemToInsert);
        }

        public static async Task<List<GridDataModel>> Read()
        {
            if (_data.Count < 1)
            {
                for (int i = 0; i < 45; i++)
                {
                    _data.Add(new GridDataModel()
                    {
                        Id = i,
                        Username = $"Username {i}",
                        EmailAddress = $"user{i}@mail.com",
                        RegistrationDate = DateTime.Now.AddDays(-2),
                        LocalTime = DateTime.Now
                    });
                }
            }

            return await Task.FromResult(_data);
        }

        public static async Task Update(GridDataModel itemToUpdate)
        {
            var index = _data.FindIndex(i => i.Id == itemToUpdate.Id);
            if (index != -1)
            {
                _data[index] = itemToUpdate;
            }
        }

        public static async Task Delete(GridDataModel itemToDelete)
        {
            _data.Remove(itemToDelete);
        }
    }
}